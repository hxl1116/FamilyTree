/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 07 21:25:54 GMT 2019
 */

package view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTKeyStroke;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Vector;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import model.Person;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import view.PersonTableModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PersonTableModel_ESTest extends view.PersonTableModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      Person person0 = personTableModel0.createPerson("", "", "");
      assertNotNull(person0);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals("", person0.getFirstName());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertTrue(person0.isFemale());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), (-1));
      assertNotNull(mockGregorianCalendar0);
      
      Vector<Object> vector0 = personTableModel0.searchPersons("", "", (-1), mockGregorianCalendar0, (Calendar) null);
      assertNotNull(vector0);
      assertFalse(vector0.contains(""));
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      
      Person person0 = personTableModel0.createPerson("view.PersonTableModel", "D", ";xLya;w\"p+6d Na/x");
      assertNotNull(person0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals("view.PersonTableModel", person0.getFirstName());
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("D", person0.getLastName());
      assertTrue(person0.isFemale());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), (-1));
      assertNotNull(mockGregorianCalendar0);
      
      Vector<Object> vector0 = personTableModel0.searchPersons("view.PersonTableModel", "D", (-1), (Calendar) null, mockGregorianCalendar0);
      assertNotNull(vector0);
      assertFalse(vector0.contains("view.PersonTableModel"));
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, personTableModel0.getRowCount());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      Person person0 = personTableModel0.createPerson("view.PersonTableModel", "U", ";xLya;w\"p+6d Na/x");
      assertNotNull(person0);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals("view.PersonTableModel", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals("U", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 422, (-1));
      assertNotNull(mockGregorianCalendar0);
      
      Vector<Object> vector0 = personTableModel0.searchPersons("view.PersonTableModel", "U", (-13), mockGregorianCalendar0, mockGregorianCalendar0);
      assertNotNull(vector0);
      assertFalse(vector0.contains((-13)));
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=422,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      Person person0 = new Person("K~UD@@+v;J[&Y~", "[x BjUZHl,W&d7{Lx", false);
      assertNotNull(person0);
      assertEquals(1, person0.getId());
      assertEquals("male", person0.getGender());
      assertEquals("K~UD@@+v;J[&Y~", person0.getFirstName());
      assertFalse(person0.isFemale());
      assertEquals("[x BjUZHl,W&d7{Lx", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      
      Person person1 = personTableModel0.addPerson(person0);
      assertNotNull(person1);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, person0.getId());
      assertEquals("male", person0.getGender());
      assertEquals("K~UD@@+v;J[&Y~", person0.getFirstName());
      assertFalse(person0.isFemale());
      assertEquals("[x BjUZHl,W&d7{Lx", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals(0, person1.getGenderAsInt());
      assertEquals("male", person1.getGender());
      assertEquals("K~UD@@+v;J[&Y~", person1.getFirstName());
      assertFalse(person1.isFemale());
      assertEquals("[x BjUZHl,W&d7{Lx", person1.getLastName());
      assertEquals(1, person1.getId());
      assertSame(person0, person1);
      assertSame(person1, person0);
      
      personTableModel0.applyChangesToPerson((String) null, "bytebuddy", "5h+;C{", 0);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      
      Person person0 = personTableModel0.createPerson("(J)CCxFv", "(J)CCxFv", "(J)CCxFv");
      assertNotNull(person0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertEquals("(J)CCxFv", person0.getFirstName());
      assertEquals("(J)CCxFv", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getId());
      
      Object object0 = personTableModel0.getValueAt(0, (-26));
      assertNull(object0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, personTableModel0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      Person person0 = personTableModel0.createPerson("view.PersonTableModel", "D", ";xLya;w\"p+6d Na/x");
      assertNotNull(person0);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("D", person0.getLastName());
      assertTrue(person0.isFemale());
      assertEquals("view.PersonTableModel", person0.getFirstName());
      assertEquals(1, person0.getId());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 422, (-1));
      assertNotNull(mockGregorianCalendar0);
      
      person0.setDateOfBirth(mockGregorianCalendar0);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("D", person0.getLastName());
      assertTrue(person0.isFemale());
      assertEquals("view.PersonTableModel", person0.getFirstName());
      assertEquals(1, person0.getId());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=422,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Vector<Object> vector0 = personTableModel0.searchPersons("view.PersonTableModel", "D", (-1), mockGregorianCalendar0, mockGregorianCalendar0);
      assertNotNull(vector0);
      assertFalse(vector0.contains("view.PersonTableModel"));
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=422,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      
      Vector<AWTKeyStroke> vector0 = new Vector<AWTKeyStroke>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      personTableModel0.persons = vector0;
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, personTableModel0.persons.size());
      assertEquals(10, personTableModel0.persons.capacity());
      assertEquals("[]", personTableModel0.persons.toString());
      assertTrue(personTableModel0.persons.isEmpty());
      
      Character character0 = Character.valueOf('S');
      assertNotNull(character0);
      assertEquals('S', (char)character0);
      
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke(character0, (-3714));
      assertNotNull(aWTKeyStroke0);
      assertEquals(0, aWTKeyStroke0.getKeyCode());
      assertEquals('S', aWTKeyStroke0.getKeyChar());
      assertEquals(13295, aWTKeyStroke0.getModifiers());
      assertEquals(400, aWTKeyStroke0.getKeyEventType());
      assertFalse(aWTKeyStroke0.isOnKeyRelease());
      
      boolean boolean0 = vector0.add(aWTKeyStroke0);
      assertEquals("[shift ctrl meta alt altGraph button3 typed S]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0, aWTKeyStroke0.getKeyCode());
      assertEquals('S', aWTKeyStroke0.getKeyChar());
      assertEquals(13295, aWTKeyStroke0.getModifiers());
      assertEquals(400, aWTKeyStroke0.getKeyEventType());
      assertFalse(aWTKeyStroke0.isOnKeyRelease());
      assertTrue(boolean0);
      
      int int0 = personTableModel0.getRowCount();
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      personTableModel0.persons = null;
      assertEquals(3, personTableModel0.getColumnCount());
      
      Vector<Object> vector0 = personTableModel0.getPersons();
      assertNull(vector0);
      assertEquals(3, personTableModel0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      
      Vector<AWTKeyStroke> vector0 = new Vector<AWTKeyStroke>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      personTableModel0.persons = vector0;
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, personTableModel0.persons.capacity());
      assertEquals("[]", personTableModel0.persons.toString());
      assertEquals(0, personTableModel0.persons.size());
      assertTrue(personTableModel0.persons.isEmpty());
      
      Character character0 = Character.valueOf('S');
      assertNotNull(character0);
      assertEquals('S', (char)character0);
      
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke(character0, (-3714));
      assertNotNull(aWTKeyStroke0);
      assertEquals(13295, aWTKeyStroke0.getModifiers());
      assertEquals(400, aWTKeyStroke0.getKeyEventType());
      assertFalse(aWTKeyStroke0.isOnKeyRelease());
      assertEquals('S', aWTKeyStroke0.getKeyChar());
      assertEquals(0, aWTKeyStroke0.getKeyCode());
      
      boolean boolean0 = vector0.add(aWTKeyStroke0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[shift ctrl meta alt altGraph button3 typed S]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(13295, aWTKeyStroke0.getModifiers());
      assertEquals(400, aWTKeyStroke0.getKeyEventType());
      assertFalse(aWTKeyStroke0.isOnKeyRelease());
      assertEquals('S', aWTKeyStroke0.getKeyChar());
      assertEquals(0, aWTKeyStroke0.getKeyCode());
      assertTrue(boolean0);
      
      Vector<Object> vector1 = personTableModel0.getPersons();
      assertNotNull(vector1);
      assertFalse(vector1.contains((-3714)));
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, personTableModel0.getRowCount());
      assertFalse(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      assertEquals("[shift ctrl meta alt altGraph button3 typed S]", vector1.toString());
      assertEquals(1, vector1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      
      LinkedHashSet<DefaultTableModel> linkedHashSet0 = new LinkedHashSet<DefaultTableModel>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Vector<DefaultTableModel> vector0 = new Vector<DefaultTableModel>(linkedHashSet0);
      assertNotNull(vector0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      
      personTableModel0.persons = vector0;
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertEquals(0, personTableModel0.persons.capacity());
      assertTrue(personTableModel0.persons.isEmpty());
      assertEquals("[]", personTableModel0.persons.toString());
      assertEquals(0, personTableModel0.persons.size());
      
      Vector vector1 = personTableModel0.getPersons();
      assertNotNull(vector1);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      Person person0 = Person.restorePerson((-1610), "u'[$Y", "u'[$Y", false);
      assertNotNull(person0);
      assertFalse(person0.isFemale());
      assertEquals("male", person0.getGender());
      assertEquals("u'[$Y", person0.getLastName());
      assertEquals((-1610), person0.getId());
      assertEquals("u'[$Y", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      
      Person person1 = personTableModel0.addPerson(person0);
      assertNotNull(person1);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertFalse(person0.isFemale());
      assertEquals("male", person0.getGender());
      assertEquals("u'[$Y", person0.getLastName());
      assertEquals((-1610), person0.getId());
      assertEquals("u'[$Y", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals(0, person1.getGenderAsInt());
      assertEquals("u'[$Y", person1.getFirstName());
      assertFalse(person1.isFemale());
      assertEquals("male", person1.getGender());
      assertEquals("u'[$Y", person1.getLastName());
      assertEquals((-1610), person1.getId());
      assertSame(person0, person1);
      assertSame(person1, person0);
      
      Person person2 = personTableModel0.getPersonWithId((-1610));
      assertNotNull(person2);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, person2.getGenderAsInt());
      assertFalse(person2.isFemale());
      assertEquals("u'[$Y", person2.getLastName());
      assertEquals("u'[$Y", person2.getFirstName());
      assertEquals("male", person2.getGender());
      assertEquals((-1610), person2.getId());
      assertSame(person2, person0);
      assertSame(person2, person1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      Person person0 = personTableModel0.createPerson("b}E(4W", "b}E(4W", "b}E(4W");
      assertNotNull(person0);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertTrue(person0.isFemale());
      assertEquals("female", person0.getGender());
      assertEquals("b}E(4W", person0.getFirstName());
      assertEquals(1, person0.getId());
      assertEquals("b}E(4W", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      
      Person person1 = personTableModel0.createPerson("b}E(4W", "b}E(4W", "b}E(4W");
      assertNotNull(person1);
      assertFalse(person1.equals((Object)person0));
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(2, personTableModel0.getRowCount());
      assertEquals("b}E(4W", person1.getLastName());
      assertEquals("female", person1.getGender());
      assertEquals(1, person1.getGenderAsInt());
      assertEquals(2, person1.getId());
      assertEquals("b}E(4W", person1.getFirstName());
      assertTrue(person1.isFemale());
      assertNotSame(person1, person0);
      
      Person person2 = personTableModel0.getPersonWithId(2);
      assertNotNull(person2);
      assertFalse(person2.equals((Object)person0));
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(2, personTableModel0.getRowCount());
      assertTrue(person2.isFemale());
      assertEquals(1, person2.getGenderAsInt());
      assertEquals("b}E(4W", person2.getFirstName());
      assertEquals("b}E(4W", person2.getLastName());
      assertEquals(2, person2.getId());
      assertEquals("female", person2.getGender());
      assertNotSame(person2, person0);
      assertSame(person2, person1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      Person person0 = personTableModel0.addPerson((Person) null);
      assertNull(person0);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      Person person1 = personTableModel0.getPersonAt(0);
      assertNull(person1);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      Vector<Person> vector0 = new Vector<Person>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Person person0 = personTableModel0.createPerson("cannot inject classes into a sealed class loader", "Gender", "Gender");
      assertNotNull(person0);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, person0.getId());
      assertEquals("cannot inject classes into a sealed class loader", person0.getFirstName());
      assertEquals("female", person0.getGender());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("Gender", person0.getLastName());
      
      boolean boolean0 = vector0.add(person0);
      assertTrue(vector0.contains(person0));
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals("[cannot inject classes into a sealed class loader Gender]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, person0.getId());
      assertEquals("cannot inject classes into a sealed class loader", person0.getFirstName());
      assertEquals("female", person0.getGender());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("Gender", person0.getLastName());
      assertTrue(boolean0);
      
      vector0.insertElementAt(person0, 0);
      assertTrue(vector0.contains(person0));
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[cannot inject classes into a sealed class loader Gender, cannot inject classes into a sealed class loader Gender]", vector0.toString());
      assertEquals(1, person0.getId());
      assertEquals("cannot inject classes into a sealed class loader", person0.getFirstName());
      assertEquals("female", person0.getGender());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("Gender", person0.getLastName());
      
      personTableModel0.persons = vector0;
      assertEquals(2, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[cannot inject classes into a sealed class loader Gender, cannot inject classes into a sealed class loader Gender]", vector0.toString());
      assertEquals(2, personTableModel0.persons.size());
      assertEquals("[cannot inject classes into a sealed class loader Gender, cannot inject classes into a sealed class loader Gender]", personTableModel0.persons.toString());
      assertEquals(10, personTableModel0.persons.capacity());
      assertFalse(personTableModel0.persons.isEmpty());
      
      personTableModel0.deletePerson(0);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      boolean boolean1 = vector0.add(person0);
      assertTrue(vector0.contains(person0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[cannot inject classes into a sealed class loader Gender, cannot inject classes into a sealed class loader Gender]", vector0.toString());
      assertEquals(1, person0.getId());
      assertEquals("cannot inject classes into a sealed class loader", person0.getFirstName());
      assertEquals("female", person0.getGender());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("Gender", person0.getLastName());
      assertTrue(boolean1);
      
      Person person1 = Person.restorePerson(0, "Gender", "W]3", false);
      assertNotNull(person1);
      assertFalse(person1.equals((Object)person0));
      assertEquals("Gender", person1.getFirstName());
      assertEquals(0, person1.getGenderAsInt());
      assertEquals(0, person1.getId());
      assertEquals("W]3", person1.getLastName());
      assertFalse(person1.isFemale());
      assertEquals("male", person1.getGender());
      assertNotSame(person1, person0);
      
      Person person2 = personTableModel0.addPerson(person1);
      assertNotNull(person2);
      assertFalse(person1.equals((Object)person0));
      assertFalse(person2.equals((Object)person0));
      assertEquals(3, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals("Gender", person1.getFirstName());
      assertEquals(0, person1.getGenderAsInt());
      assertEquals(0, person1.getId());
      assertEquals("W]3", person1.getLastName());
      assertFalse(person1.isFemale());
      assertEquals("male", person1.getGender());
      assertEquals("Gender", person2.getFirstName());
      assertEquals(0, person2.getGenderAsInt());
      assertEquals("W]3", person2.getLastName());
      assertEquals(0, person2.getId());
      assertFalse(person2.isFemale());
      assertEquals("male", person2.getGender());
      assertSame(person1, person2);
      assertNotSame(person1, person0);
      assertNotSame(person2, person0);
      assertSame(person2, person1);
      
      Person person3 = personTableModel0.getPersonAt(2);
      assertNotNull(person3);
      assertFalse(person3.equals((Object)person0));
      assertEquals(3, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals("male", person3.getGender());
      assertEquals(0, person3.getId());
      assertEquals("Gender", person3.getFirstName());
      assertEquals("W]3", person3.getLastName());
      assertFalse(person3.isFemale());
      assertEquals(0, person3.getGenderAsInt());
      assertSame(person3, person1);
      assertSame(person3, person2);
      assertNotSame(person3, person0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      Person person0 = personTableModel0.createPerson("c \"H|Zx?#c", "c \"H|Zx?#c", "c \"H|Zx?#c");
      assertNotNull(person0);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals("c \"H|Zx?#c", person0.getLastName());
      assertEquals("c \"H|Zx?#c", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(person0.isFemale());
      assertEquals("male", person0.getGender());
      assertEquals(1, person0.getId());
      
      Person person1 = personTableModel0.getPersonAt(0);
      assertNotNull(person1);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertFalse(person1.isFemale());
      assertEquals("c \"H|Zx?#c", person1.getLastName());
      assertEquals("male", person1.getGender());
      assertEquals(0, person1.getGenderAsInt());
      assertEquals("c \"H|Zx?#c", person1.getFirstName());
      assertEquals(1, person1.getId());
      assertSame(person1, person0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      
      Person person0 = Person.restorePerson((-1117), "net.bytebuddy.description.NamedElement", "Could not find encoding: UTF-8", false);
      assertNotNull(person0);
      assertEquals("net.bytebuddy.description.NamedElement", person0.getFirstName());
      assertEquals("male", person0.getGender());
      assertEquals((-1117), person0.getId());
      assertEquals("Could not find encoding: UTF-8", person0.getLastName());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getGenderAsInt());
      
      person0.setFemale(true);
      assertEquals("net.bytebuddy.description.NamedElement", person0.getFirstName());
      assertEquals("female", person0.getGender());
      assertEquals((-1117), person0.getId());
      assertTrue(person0.isFemale());
      assertEquals("Could not find encoding: UTF-8", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      
      Person person1 = personTableModel0.addPerson(person0);
      assertNotNull(person1);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals("net.bytebuddy.description.NamedElement", person0.getFirstName());
      assertEquals("female", person0.getGender());
      assertEquals((-1117), person0.getId());
      assertTrue(person0.isFemale());
      assertEquals("Could not find encoding: UTF-8", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person1.getGender());
      assertEquals(1, person1.getGenderAsInt());
      assertEquals((-1117), person1.getId());
      assertTrue(person1.isFemale());
      assertEquals("net.bytebuddy.description.NamedElement", person1.getFirstName());
      assertEquals("Could not find encoding: UTF-8", person1.getLastName());
      assertSame(person0, person1);
      assertSame(person1, person0);
      
      Person person2 = personTableModel0.addPerson(person0);
      assertNotNull(person2);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(2, personTableModel0.getRowCount());
      assertEquals("net.bytebuddy.description.NamedElement", person0.getFirstName());
      assertEquals("female", person0.getGender());
      assertEquals((-1117), person0.getId());
      assertTrue(person0.isFemale());
      assertEquals("Could not find encoding: UTF-8", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person2.getGender());
      assertTrue(person2.isFemale());
      assertEquals((-1117), person2.getId());
      assertEquals("net.bytebuddy.description.NamedElement", person2.getFirstName());
      assertEquals("Could not find encoding: UTF-8", person2.getLastName());
      assertEquals(1, person2.getGenderAsInt());
      assertSame(person0, person1);
      assertSame(person0, person2);
      assertSame(person2, person1);
      assertSame(person2, person0);
      
      Person person3 = personTableModel0.getPersonAt(1);
      assertNotNull(person3);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(2, personTableModel0.getRowCount());
      assertTrue(person3.isFemale());
      assertEquals(1, person3.getGenderAsInt());
      assertEquals("Could not find encoding: UTF-8", person3.getLastName());
      assertEquals("net.bytebuddy.description.NamedElement", person3.getFirstName());
      assertEquals("female", person3.getGender());
      assertEquals((-1117), person3.getId());
      assertSame(person3, person0);
      assertSame(person3, person1);
      assertSame(person3, person2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 3871, (-1147), (-4892), 4);
      assertNotNull(mockGregorianCalendar0);
      
      Person person0 = personTableModel0.createPerson("", (String) null, "7]Hn&0Vx?UFDx$#*U");
      assertNotNull(person0);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals("male", person0.getGender());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getGenderAsInt());
      assertNull(person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertEquals(1, person0.getId());
      
      // Undeclared exception!
      try { 
        personTableModel0.showMatchingPersons("", "", 0, (GregorianCalendar) mockGregorianCalendar0, (GregorianCalendar) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      
      Person person0 = personTableModel0.createPerson("OHr1(g", "Last Name", "Last Name");
      assertNotNull(person0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals("OHr1(g", person0.getFirstName());
      assertEquals("Last Name", person0.getLastName());
      assertEquals("male", person0.getGender());
      assertEquals(1, person0.getId());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(person0.isFemale());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertNotNull(gregorianCalendar0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals("OHr1(g", person0.getFirstName());
      assertEquals("Last Name", person0.getLastName());
      assertEquals("male", person0.getGender());
      assertEquals(1, person0.getId());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(person0.isFemale());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      
      Person person1 = personTableModel0.createPerson((String) null, "", "female");
      assertNotNull(person1);
      assertFalse(person1.equals((Object)person0));
      assertEquals(2, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals("", person1.getLastName());
      assertEquals(2, person1.getId());
      assertEquals("female", person1.getGender());
      assertNull(person1.getFirstName());
      assertEquals(1, person1.getGenderAsInt());
      assertTrue(person1.isFemale());
      assertNotSame(person1, person0);
      
      // Undeclared exception!
      try { 
        personTableModel0.showMatchingPersons("", "`;cT;$ONDRsz}#52", (-1), gregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      Person person0 = personTableModel0.addPerson((Person) null);
      assertNull(person0);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      // Undeclared exception!
      try { 
        personTableModel0.showMatchingPersons("ya\"LeOm9y4k", (String) null, (-1982813111));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.PersonTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      Person person0 = personTableModel0.createPerson((String) null, "", "-):<klC1;l~A");
      assertNotNull(person0);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals("", person0.getLastName());
      assertNull(person0.getFirstName());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      assertNotNull(gregorianCalendar0);
      assertEquals(1, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals("", person0.getLastName());
      assertNull(person0.getFirstName());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      
      // Undeclared exception!
      try { 
        personTableModel0.searchPersons("SN0_@A1q9H{", "net.bytebuddy.dynamic.loading.InjectionClassLoader", 439, gregorianCalendar0, gregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      
      Person person0 = personTableModel0.createPerson("", "", "");
      assertNotNull(person0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, personTableModel0.getRowCount());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getId());
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), (-1));
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set(0, 23);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=23,YEAR=-1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        personTableModel0.searchPersons("", "", (-1), mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      
      Vector<AWTKeyStroke> vector0 = new Vector<AWTKeyStroke>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      personTableModel0.persons = vector0;
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(10, personTableModel0.persons.capacity());
      assertTrue(personTableModel0.persons.isEmpty());
      assertEquals("[]", personTableModel0.persons.toString());
      assertEquals(0, personTableModel0.persons.size());
      
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke('6');
      assertNotNull(aWTKeyStroke0);
      assertEquals('6', aWTKeyStroke0.getKeyChar());
      assertEquals(0, aWTKeyStroke0.getKeyCode());
      assertEquals(0, aWTKeyStroke0.getModifiers());
      assertEquals(400, aWTKeyStroke0.getKeyEventType());
      assertFalse(aWTKeyStroke0.isOnKeyRelease());
      
      boolean boolean0 = vector0.add(aWTKeyStroke0);
      assertEquals("[typed 6]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals('6', aWTKeyStroke0.getKeyChar());
      assertEquals(0, aWTKeyStroke0.getKeyCode());
      assertEquals(0, aWTKeyStroke0.getModifiers());
      assertEquals(400, aWTKeyStroke0.getKeyEventType());
      assertFalse(aWTKeyStroke0.isOnKeyRelease());
      assertTrue(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 4488, 0);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        personTableModel0.searchPersons("Gender", "The class file for ", 3, mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.KeyStroke cannot be cast to model.Person
         //
         verifyException("view.PersonTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      personTableModel0.persons = vector0;
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(personTableModel0.persons.isEmpty());
      assertEquals(10, personTableModel0.persons.capacity());
      assertEquals(0, personTableModel0.persons.size());
      assertEquals("[]", personTableModel0.persons.toString());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      boolean boolean0 = vector0.add(locale0);
      assertTrue(vector0.contains(locale0));
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[en]", vector0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        personTableModel0.getValueAt(0, 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to model.Person
         //
         verifyException("view.PersonTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      
      // Undeclared exception!
      try { 
        personTableModel0.getValueAt((-866), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      personTableModel0.persons = null;
      assertEquals(3, personTableModel0.getColumnCount());
      
      // Undeclared exception!
      try { 
        personTableModel0.getRowCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.PersonTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      Vector<AWTKeyStroke> vector0 = new Vector<AWTKeyStroke>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      personTableModel0.persons = vector0;
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(personTableModel0.persons.isEmpty());
      assertEquals("[]", personTableModel0.persons.toString());
      assertEquals(10, personTableModel0.persons.capacity());
      assertEquals(0, personTableModel0.persons.size());
      
      boolean boolean0 = vector0.add((AWTKeyStroke) null);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        personTableModel0.getPersonWithId(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.PersonTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      Vector<AWTKeyStroke> vector0 = new Vector<AWTKeyStroke>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      personTableModel0.persons = vector0;
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, personTableModel0.persons.size());
      assertTrue(personTableModel0.persons.isEmpty());
      assertEquals("[]", personTableModel0.persons.toString());
      assertEquals(10, personTableModel0.persons.capacity());
      
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((-1662), (-1431655763));
      assertNotNull(keyStroke0);
      assertEquals(11247, keyStroke0.getModifiers());
      assertEquals((-1662), keyStroke0.getKeyCode());
      assertEquals(401, keyStroke0.getKeyEventType());
      assertFalse(keyStroke0.isOnKeyRelease());
      assertEquals('\uFFFF', keyStroke0.getKeyChar());
      
      boolean boolean0 = vector0.add((AWTKeyStroke) keyStroke0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[shift ctrl meta alt altGraph button2 pressed UNKNOWN]", vector0.toString());
      assertEquals(11247, keyStroke0.getModifiers());
      assertEquals((-1662), keyStroke0.getKeyCode());
      assertEquals(401, keyStroke0.getKeyEventType());
      assertFalse(keyStroke0.isOnKeyRelease());
      assertEquals('\uFFFF', keyStroke0.getKeyChar());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        personTableModel0.getPersonWithId(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.KeyStroke cannot be cast to model.Person
         //
         verifyException("view.PersonTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      personTableModel0.persons = null;
      assertEquals(3, personTableModel0.getColumnCount());
      
      // Undeclared exception!
      try { 
        personTableModel0.getPersonAt(3795);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.PersonTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      
      // Undeclared exception!
      try { 
        personTableModel0.getColumnName((-549));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -549
         //
         verifyException("view.PersonTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      // Undeclared exception!
      try { 
        personTableModel0.createPerson("", "Could not find encoding: UTF-8", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      
      Person person0 = personTableModel0.addPerson((Person) null);
      assertNull(person0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, personTableModel0.getRowCount());
      
      // Undeclared exception!
      try { 
        personTableModel0.applyChangesToPerson((String) null, (String) null, "GendeZ", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.PersonTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      
      Vector<AWTKeyStroke> vector0 = new Vector<AWTKeyStroke>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      personTableModel0.persons = vector0;
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(10, personTableModel0.persons.capacity());
      assertEquals("[]", personTableModel0.persons.toString());
      assertEquals(0, personTableModel0.persons.size());
      assertTrue(personTableModel0.persons.isEmpty());
      
      personTableModel0.persons = null;
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        personTableModel0.addPerson((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.PersonTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      assertNotNull(personTableModel0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 3871, (-1147), (-4892), 4);
      assertNotNull(mockGregorianCalendar0);
      
      personTableModel0.showMatchingPersons("", "", 0, (GregorianCalendar) mockGregorianCalendar0, (GregorianCalendar) mockGregorianCalendar0);
      assertEquals(0, personTableModel0.getRowCount());
      assertEquals(3, personTableModel0.getColumnCount());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=4,MONTH=4,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3871,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1147,HOUR_OF_DAY=-1147,MINUTE=-4892,SECOND=4,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      Person person0 = personTableModel0.createPerson("view.PersonTableModel", "view.PersonTableModel", ";xLya;w\"p+6d Na/x");
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      Vector<Object> vector0 = personTableModel0.searchPersons("view.PersonTableModel", "view.PersonTableModel", 0, gregorianCalendar0, gregorianCalendar0);
      assertEquals("view.PersonTableModel", person0.getLastName());
      assertEquals("view.PersonTableModel", person0.getFirstName());
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      personTableModel0.createPerson("", "", "");
      personTableModel0.showMatchingPersons("", "fdme", 2196);
      assertEquals(3, personTableModel0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      personTableModel0.createPerson("view.PersonTableModel", "D", ";xLya;w\"p+6d Na/x");
      personTableModel0.showMatchingPersons("female", ":jD:5u\"[Im\u0002", 0, (GregorianCalendar) null);
      assertEquals(1, personTableModel0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      Person person0 = personTableModel0.createPerson((String) null, "", "-):<klC1;l~A");
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      personTableModel0.showMatchingPersons((String) null, (String) null, 439, gregorianCalendar0);
      assertEquals("", person0.getLastName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      personTableModel0.createPerson("", "male", "Cb#mk9:^");
      personTableModel0.showMatchingPersons("", "male", 0, (GregorianCalendar) null);
      assertEquals(1, personTableModel0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      Person person0 = Person.restorePerson(0, "Gender", "W]3", false);
      personTableModel0.addPerson(person0);
      Person person1 = personTableModel0.getPersonWithId(0);
      assertEquals("male", person1.getGender());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      personTableModel0.createPerson("", "", "");
      Person person0 = personTableModel0.getPersonWithId(0);
      assertNull(person0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      personTableModel0.createPerson("c \"H|Zx?#c", "c \"H|Zx?#c", "c \"H|Zx?#c");
      Object object0 = personTableModel0.getValueAt(0, 478);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      personTableModel0.createPerson("=eD?zw/;ai?Q+5C&f+Q!", "=eD?zw/;ai?Q+5C&f+Q!", "=eD?zw/;ai?Q+5C&f+Q!");
      Object object0 = personTableModel0.getValueAt(0, 2);
      assertEquals("male", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      personTableModel0.addPerson((Person) null);
      // Undeclared exception!
      try { 
        personTableModel0.getValueAt(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.PersonTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      String string0 = personTableModel0.getColumnName(1684);
      assertEquals("BLU", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      int int0 = personTableModel0.findColumn("");
      assertEquals((-1), int0);
      assertEquals(3, personTableModel0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      int int0 = personTableModel0.getColumnCount();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      int int0 = personTableModel0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      // Undeclared exception!
      try { 
        personTableModel0.deletePerson(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      // Undeclared exception!
      try { 
        personTableModel0.applyChangesToPerson((String) null, (String) null, "Gender", 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      personTableModel0.createPerson("", "", "");
      Object object0 = personTableModel0.getValueAt(0, 1);
      assertNotNull(object0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PersonTableModel personTableModel0 = new PersonTableModel();
      // Undeclared exception!
      try { 
        personTableModel0.getPersonAt(2196);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2196 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
