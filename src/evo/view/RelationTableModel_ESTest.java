/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 07 21:25:39 GMT 2019
 */

package view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Stack;
import java.util.Vector;
import model.Person;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import view.RelationTableModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RelationTableModel_ESTest extends view.RelationTableModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      int int0 = relationTableModel0.findColumn("");
      assertEquals((-1), int0);
      assertEquals(4, relationTableModel0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) null);
      relationTableModel0.relationships = vector0;
      Object object0 = relationTableModel0.getValueAt(0, 4);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) relationTableModel0);
      relationTableModel0.relationships = vector0;
      int int0 = relationTableModel0.getRowCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      Person person0 = Person.restorePerson((-17), "t(Z!m)-uSglSX1Pu`c", "", false);
      relationTableModel0.setCurrentPerson(person0);
      Person person1 = relationTableModel0.getCurrentPerson();
      assertEquals((-17), person1.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      Person person0 = Person.restorePerson(0, "8[)vl:PYZeS;1{qs", "+C%%2~SZ", false);
      relationTableModel0.setCurrentPerson(person0);
      Person person1 = relationTableModel0.getCurrentPerson();
      assertFalse(person1.isFemale());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      // Undeclared exception!
      try { 
        relationTableModel0.setCurrentPerson((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.RelationTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      relationTableModel0.relationships = null;
      // Undeclared exception!
      try { 
        relationTableModel0.personRemoved();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.RelationTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      relationTableModel0.relationships = null;
      // Undeclared exception!
      try { 
        relationTableModel0.personAdded();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.RelationTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) relationTableModel0);
      relationTableModel0.relationships = vector0;
      // Undeclared exception!
      try { 
        relationTableModel0.getValueAt(0, 2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // view.RelationTableModel cannot be cast to model.Relation
         //
         verifyException("view.RelationTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      // Undeclared exception!
      try { 
        relationTableModel0.getValueAt((-3026), (-1571));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      relationTableModel0.relationships = null;
      // Undeclared exception!
      try { 
        relationTableModel0.getRowCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.RelationTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) null);
      relationTableModel0.relationships = vector0;
      // Undeclared exception!
      try { 
        relationTableModel0.getPersonAt(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.RelationTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      Vector<Object> vector0 = new Vector<Object>();
      relationTableModel0.relationships = vector0;
      vector0.add((Object) relationTableModel0.relationships);
      // Undeclared exception!
      try { 
        relationTableModel0.getPersonAt(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector cannot be cast to model.Relation
         //
         verifyException("view.RelationTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      // Undeclared exception!
      try { 
        relationTableModel0.getColumnName((-3508));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3508
         //
         verifyException("view.RelationTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      String string0 = relationTableModel0.getColumnName(1184);
      assertEquals("ASO", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) null);
      relationTableModel0.relationships = vector0;
      // Undeclared exception!
      try { 
        relationTableModel0.getValueAt(0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.RelationTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) null);
      relationTableModel0.relationships = vector0;
      Object object0 = relationTableModel0.getValueAt(0, (-1480));
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      relationTableModel0.relationships = (Vector) stack0;
      // Undeclared exception!
      try { 
        relationTableModel0.getValueAt(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.RelationTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) null);
      relationTableModel0.relationships = vector0;
      // Undeclared exception!
      try { 
        relationTableModel0.getValueAt(0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.RelationTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      relationTableModel0.relationships = (Vector) stack0;
      // Undeclared exception!
      try { 
        relationTableModel0.getValueAt(0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("view.RelationTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      Person person0 = relationTableModel0.getCurrentPerson();
      assertNull(person0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      int int0 = relationTableModel0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      relationTableModel0.personRemoved();
      assertEquals(4, relationTableModel0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      relationTableModel0.personAdded();
      assertEquals(0, relationTableModel0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      int int0 = relationTableModel0.getColumnCount();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      Person person0 = new Person("Las< Name", "Las< Name", true);
      relationTableModel0.setCurrentPerson(person0);
      Person person1 = relationTableModel0.getCurrentPerson();
      assertTrue(person1.isFemale());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RelationTableModel relationTableModel0 = new RelationTableModel();
      // Undeclared exception!
      try { 
        relationTableModel0.getPersonAt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
