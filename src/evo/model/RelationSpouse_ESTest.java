/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 07 19:19:05 GMT 2019
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import model.Person;
import model.RelationSpouse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RelationSpouse_ESTest extends model.RelationSpouse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Person person1 = Person.restorePerson((-1), "female", "*aBiNZC?b", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person1);
      Person person2 = relationSpouse0.getPartner(person0);
      assertNotNull(person2);
      assertEquals((-1), person2.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Person person0 = Person.restorePerson((-27), "Child", "Child", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      RelationSpouse relationSpouse1 = new RelationSpouse(relationSpouse0.husband, (Person) null);
      Person person1 = relationSpouse1.getWife();
      assertNull(person1);
      assertFalse(relationSpouse0.equals((Object)relationSpouse1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "uX+_lg18", "uX+_lg18", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = relationSpouse0.getWife();
      assertEquals("uX+_lg18", person1.getFirstName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Person person0 = Person.restorePerson((-145), "}&pr#d+mpY|1Pj6l6", "", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = relationSpouse0.getWife();
      assertSame(person0, person1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RelationSpouse relationSpouse0 = new RelationSpouse((Person) null, (Person) null);
      Person person0 = relationSpouse0.getPerson2();
      assertNull(person0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "Father", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = relationSpouse0.getPerson2();
      assertSame(person0, person1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Person person0 = Person.restorePerson((-2463), ">8Hx", ">8Hx", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = relationSpouse0.getPerson2();
      assertEquals((-2463), person1.getId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Person person0 = new Person("VGY@a;v~LgT", "VGY@a;v~LgT", false);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = relationSpouse0.getPerson2();
      assertSame(person1, person0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Person person0 = Person.restorePerson((-548), "Father", "Father", false);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, (Person) null);
      Person person1 = relationSpouse0.getPerson1();
      assertNull(person1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "Father", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = relationSpouse0.getPerson1();
      assertTrue(person1.isFemale());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Person person0 = Person.restorePerson((-27), "Child", "Child", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = relationSpouse0.getPerson1();
      assertSame(person1, person0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Person person0 = Person.restorePerson(234, "model.RelationParentChild", "model.RelationParentChild", false);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = relationSpouse0.getPerson1();
      assertEquals("male", person1.getGender());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "6(xGhk|y1=N{hKA0", "6(xGhk|y1=N{hKA0", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = relationSpouse0.getPartner(person0);
      assertEquals(1, person1.getGenderAsInt());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Person person0 = new Person("An error has occured", "yqL`b/`ZQS'Lu>!~s9i", false);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = relationSpouse0.getPartner(person0);
      assertEquals(1, person1.getId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RelationSpouse relationSpouse0 = new RelationSpouse((Person) null, (Person) null);
      Person person0 = relationSpouse0.getHusband();
      assertNull(person0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = relationSpouse0.getHusband();
      assertTrue(person1.isFemale());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Person person0 = Person.restorePerson((-1), (String) null, "p#gM", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = relationSpouse0.getHusband();
      assertEquals("p#gM", person1.getLastName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Person person0 = new Person("Wife", "Wife", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = relationSpouse0.getHusband();
      assertEquals(1, person1.getId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RelationSpouse relationSpouse0 = new RelationSpouse((Person) null, (Person) null);
      // Undeclared exception!
      try { 
        relationSpouse0.getRelationType((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.RelationSpouse", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Person person0 = new Person("Wife", "Wife", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      // Undeclared exception!
      try { 
        relationSpouse0.getPartner((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.RelationSpouse", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Person person0 = new Person("VGY@a;v~LgT", "VGY@a;v~LgT", false);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = relationSpouse0.getHusband();
      assertFalse(person1.isFemale());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Person person0 = new Person("VGY@a;v~LgT", "VGY@a;v~LgT", false);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = relationSpouse0.getWife();
      assertFalse(person1.isFemale());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Person person0 = new Person("N]B0ySBVNNYs=osnw(v", "N]B0ySBVNNYs=osnw(v", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = new Person("Mother", "Son", true);
      RelationSpouse relationSpouse1 = new RelationSpouse(relationSpouse0.husband, person1);
      boolean boolean0 = relationSpouse1.equals(relationSpouse0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Person person0 = new Person("N]B0ySBVNNYs=osnw(v", "N]B0ySBVNNYs=osnw(v", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      boolean boolean0 = relationSpouse0.equals(relationSpouse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Person person0 = new Person("Wife", "Wife", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = Person.restorePerson((-1), "Parent", "Mother", false);
      RelationSpouse relationSpouse1 = new RelationSpouse(person1, person0);
      boolean boolean0 = relationSpouse0.equals(relationSpouse1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Person person0 = new Person("Wife", "Wife", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      boolean boolean0 = relationSpouse0.equals(person0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Person person0 = new Person("o", "o", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = new Person("Wife", "Spouse", true);
      relationSpouse0.husband = person1;
      Person person2 = relationSpouse0.getPartner(person0);
      assertEquals(2, person2.getId());
      assertNotNull(person2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Person person0 = new Person("o", "o", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = new Person("Wife", "Spouse", true);
      Person person2 = relationSpouse0.getPartner(person1);
      assertNull(person2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Person person0 = new Person("o", "o", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = new Person("Wife", "Spouse", true);
      relationSpouse0.husband = person1;
      String string0 = relationSpouse0.getRelationType(person0);
      assertEquals("Husband", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Person person0 = new Person("Wife", "Wife", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      String string0 = relationSpouse0.getRelationType(relationSpouse0.wife);
      assertEquals("Wife", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Person person0 = new Person("N]B0ySBVNNYs=osnw(v", "N]B0ySBVNNYs=osnw(v", true);
      RelationSpouse relationSpouse0 = new RelationSpouse(person0, person0);
      Person person1 = new Person("Mother", "Son", true);
      String string0 = relationSpouse0.getRelationType(person1);
      assertEquals("An error has occured", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RelationSpouse relationSpouse0 = new RelationSpouse((Person) null, (Person) null);
      // Undeclared exception!
      try { 
        relationSpouse0.equals(relationSpouse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.RelationSpouse", e);
      }
  }
}
