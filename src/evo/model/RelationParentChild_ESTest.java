/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 07 19:18:54 GMT 2019
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import model.Person;
import model.RelationParentChild;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RelationParentChild_ESTest extends model.RelationParentChild_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RelationParentChild relationParentChild0 = new RelationParentChild((Person) null, (Person) null);
      Person person0 = relationParentChild0.getPerson2();
      assertNull(person0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      Person person1 = relationParentChild0.getPerson2();
      assertTrue(person1.isFemale());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Person person0 = Person.restorePerson((-1652), "female", "female", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      Person person1 = relationParentChild0.getPerson2();
      assertEquals("female", person1.getFirstName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "8+:<*#i/v-b", "8+:<*#i/v-b", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      person0.setFemale(true);
      Person person1 = relationParentChild0.getPerson2();
      assertEquals("8+:<*#i/v-b", person1.getFirstName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RelationParentChild relationParentChild0 = new RelationParentChild((Person) null, (Person) null);
      Person person0 = relationParentChild0.getPerson1();
      assertNull(person0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      Person person1 = new Person("model.RelationParentChild", "model.RelationParentChild", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person1);
      Person person2 = relationParentChild0.getPerson1();
      assertEquals(2, person2.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Person person0 = Person.restorePerson((-935), "Mother", "Mother", true);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      Person person1 = relationParentChild0.getPerson1();
      assertSame(person1, person0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      Person person1 = relationParentChild0.getPerson1();
      assertEquals("male", person1.getGender());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Person person0 = Person.restorePerson((-2031), "An error has occured", "", true);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      Person person1 = relationParentChild0.getPartner(person0);
      assertTrue(person1.isFemale());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "8+:<*#i/v-b", "8+:<*#i/v-b", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      person0.setFemale(true);
      Person person1 = relationParentChild0.getPartner(person0);
      assertEquals("8+:<*#i/v-b", person1.getFirstName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RelationParentChild relationParentChild0 = new RelationParentChild((Person) null, (Person) null);
      Person person0 = relationParentChild0.getParent();
      assertNull(person0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Person person0 = new Person("model.RelationParentChild", "model.RelationParentChild", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      Person person1 = relationParentChild0.getParent();
      assertSame(person1, person0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Person person0 = Person.restorePerson((-1), "b=QybT-%FZmx", "#}kqa<?x~BNU@Fc", true);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      Person person1 = relationParentChild0.getParent();
      assertEquals("female", person1.getGender());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "8+:<*#i/v-b", "8+:<*#i/v-b", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      person0.setFemale(true);
      Person person1 = relationParentChild0.getParent();
      assertEquals("female", person1.getGender());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RelationParentChild relationParentChild0 = new RelationParentChild((Person) null, (Person) null);
      Person person0 = relationParentChild0.getChild();
      assertNull(person0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Person person0 = new Person("", "", true);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      Person person1 = relationParentChild0.getChild();
      assertEquals("", person1.getFirstName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Person person0 = Person.restorePerson((-974), "Relation exists or is illegal", "Relation exists or is illegal", true);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      Person person1 = relationParentChild0.getChild();
      assertEquals("Relation exists or is illegal", person1.getLastName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "8+:<*#i/v-b", "8+:<*#i/v-b", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      person0.setFemale(true);
      Person person1 = relationParentChild0.getChild();
      assertEquals("8+:<*#i/v-b", person1.getLastName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RelationParentChild relationParentChild0 = new RelationParentChild((Person) null, (Person) null);
      // Undeclared exception!
      try { 
        relationParentChild0.getRelationType((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.RelationParentChild", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "Child", "_SUwH", true);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      // Undeclared exception!
      try { 
        relationParentChild0.getPartner((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.RelationParentChild", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "8+:<*#i/v-b", "8+:<*#i/v-b", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      Person person1 = relationParentChild0.getChild();
      assertEquals("8+:<*#i/v-b", person1.getLastName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      Person person1 = new Person((String) null, "Mother", false);
      Person person2 = relationParentChild0.getPartner(person1);
      assertNull(person2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Person person0 = new Person("", "", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      Person person1 = relationParentChild0.getPartner(person0);
      assertSame(person1, person0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("female", "male", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person1);
      Person person2 = relationParentChild0.getPartner(person1);
      assertEquals("", person2.getLastName());
      assertNotNull(person2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Person person0 = new Person("~F/", "~F/", true);
      Person person1 = Person.restorePerson(1, "Wife", "Mother", true);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person1);
      String string0 = relationParentChild0.getRelationType(person1);
      assertEquals("Daughter", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Person person0 = new Person("", "", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      Person person1 = new Person("Husband", "Spouse", false);
      String string0 = relationParentChild0.getRelationType(person1);
      assertEquals("An error has occured", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Person person0 = new Person("~F/", "~F/", true);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      String string0 = relationParentChild0.getRelationType(person0);
      assertEquals("Mother", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Person person0 = new Person("", "", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      String string0 = relationParentChild0.getRelationType(person0);
      assertEquals("Father", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("female", "male", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person1);
      String string0 = relationParentChild0.getRelationType(person1);
      assertEquals("Son", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Person person0 = new Person("~F/", "~F/", true);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      Person person1 = Person.restorePerson(1, "Wife", "Mother", true);
      RelationParentChild relationParentChild1 = new RelationParentChild(person0, person1);
      boolean boolean0 = relationParentChild0.equals(relationParentChild1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      RelationParentChild relationParentChild1 = new RelationParentChild((Person) null, (Person) null);
      boolean boolean0 = relationParentChild0.equals(relationParentChild1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Person person0 = new Person("~F/", "~F/", true);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      boolean boolean0 = relationParentChild0.equals(relationParentChild0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Person person0 = new Person("", "", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      boolean boolean0 = relationParentChild0.equals(person0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Person person0 = new Person("", "", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person0);
      boolean boolean0 = relationParentChild0.isParent(person0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("female", "male", false);
      RelationParentChild relationParentChild0 = new RelationParentChild(person0, person1);
      boolean boolean0 = relationParentChild0.isParent(person0);
      assertFalse(boolean0);
  }
}
