/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 07 19:19:39 GMT 2019
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import model.Person;
import model.Relation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Person_ESTest extends model.Person_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertNull(person0.getLastName());
      assertNull(person0.getFirstName());
      assertTrue(person0.isFemale());
      assertNotNull(person0);
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertNull(person0.getLastName());
      assertNull(person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertNotNull(gregorianCalendar0);
      
      gregorianCalendar0.add(1, 1);
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertNull(person0.getLastName());
      assertNull(person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1971,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertNull(person0.getLastName());
      assertNull(person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1971,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Person person0 = Person.restorePerson(264, "4xevA5645!", "4xevA5645!", false);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      assertEquals("4xevA5645!", person0.getFirstName());
      assertEquals(264, person0.getId());
      assertEquals("4xevA5645!", person0.getLastName());
      assertFalse(person0.isFemale());
      assertNotNull(person0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(264, 264, 5122, 5122, 5122, 264);
      assertNotNull(mockGregorianCalendar0);
      
      person0.setDateOfDeath(mockGregorianCalendar0);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      assertEquals("4xevA5645!", person0.getFirstName());
      assertEquals(264, person0.getId());
      assertEquals("4xevA5645!", person0.getLastName());
      assertFalse(person0.isFemale());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=264,MONTH=264,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5122,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5122,HOUR_OF_DAY=5122,MINUTE=5122,SECOND=264,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 1115, 979);
      assertNotNull(mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      boolean boolean0 = person0.dateOfDeathEquals(mockGregorianCalendar1);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      assertEquals("4xevA5645!", person0.getFirstName());
      assertEquals(264, person0.getId());
      assertEquals("4xevA5645!", person0.getLastName());
      assertFalse(person0.isFemale());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=1115,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=979,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(boolean0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertTrue(person0.isFemale());
      assertNull(person0.getLastName());
      assertNull(person0.getFirstName());
      assertNotNull(person0);
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertTrue(person0.isFemale());
      assertNull(person0.getLastName());
      assertNull(person0.getFirstName());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertNotNull(gregorianCalendar0);
      
      gregorianCalendar0.add(1, 1);
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertTrue(person0.isFemale());
      assertNull(person0.getLastName());
      assertNull(person0.getFirstName());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1971,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertTrue(person0.isFemale());
      assertNull(person0.getLastName());
      assertNull(person0.getFirstName());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1971,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Person person0 = new Person("Relation exists or is illegal", "Relation exists or is illegal", true);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getId());
      assertEquals("Relation exists or is illegal", person0.getLastName());
      assertEquals("Relation exists or is illegal", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertNotNull(person0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      person0.setDateOfBirth(mockGregorianCalendar0);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getId());
      assertEquals("Relation exists or is illegal", person0.getLastName());
      assertEquals("Relation exists or is illegal", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(1, 2, 1, (-2666), 1);
      assertNotNull(mockGregorianCalendar1);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      boolean boolean0 = person0.dateOfBirthEquals(mockGregorianCalendar1);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getId());
      assertEquals("Relation exists or is illegal", person0.getLastName());
      assertEquals("Relation exists or is illegal", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2666,HOUR_OF_DAY=-2666,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(boolean0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, false);
      assertNull(person0.getLastName());
      assertNull(person0.getFirstName());
      assertEquals("male", person0.getGender());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(person0.isFemale());
      assertEquals(1, person0.getId());
      assertNotNull(person0);
      
      boolean boolean0 = person0.isFemale();
      assertNull(person0.getLastName());
      assertNull(person0.getFirstName());
      assertEquals("male", person0.getGender());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(person0.isFemale());
      assertEquals(1, person0.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Person person0 = new Person("e", "e", true);
      assertEquals("e", person0.getFirstName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals("e", person0.getLastName());
      assertTrue(person0.isFemale());
      assertNotNull(person0);
      
      Person person1 = new Person("female", "male", true);
      assertTrue(person1.isFemale());
      assertEquals(2, person1.getId());
      assertEquals("female", person1.getGender());
      assertEquals("female", person1.getFirstName());
      assertEquals("male", person1.getLastName());
      assertEquals(1, person1.getGenderAsInt());
      assertNotNull(person1);
      assertFalse(person1.equals((Object)person0));
      
      person0.addChild(person1);
      assertEquals("e", person0.getFirstName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals("e", person0.getLastName());
      assertTrue(person0.isFemale());
      assertTrue(person1.isFemale());
      assertEquals(2, person1.getId());
      assertEquals("female", person1.getGender());
      assertEquals("female", person1.getFirstName());
      assertEquals("male", person1.getLastName());
      assertEquals(1, person1.getGenderAsInt());
      assertFalse(person0.equals((Object)person1));
      assertFalse(person1.equals((Object)person0));
      assertNotSame(person0, person1);
      assertNotSame(person1, person0);
      
      Vector<Object> vector0 = person0.getRelationships();
      assertEquals("e", person0.getFirstName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals("e", person0.getLastName());
      assertTrue(person0.isFemale());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertNotNull(vector0);
      assertFalse(person0.equals((Object)person1));
      assertFalse(vector0.contains("e"));
      assertNotSame(person0, person1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Person person0 = new Person("", (String) null, false);
      assertEquals("male", person0.getGender());
      assertNull(person0.getLastName());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getFirstName());
      assertEquals(1, person0.getId());
      assertNotNull(person0);
      
      String string0 = person0.getLastName();
      assertEquals("male", person0.getGender());
      assertNull(person0.getLastName());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getFirstName());
      assertEquals(1, person0.getId());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Person person0 = Person.restorePerson(0, " ", "", false);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals(0, person0.getId());
      assertFalse(person0.isFemale());
      assertEquals("male", person0.getGender());
      assertEquals("", person0.getLastName());
      assertEquals(" ", person0.getFirstName());
      assertNotNull(person0);
      
      String string0 = person0.getLastName();
      assertEquals(0, person0.getGenderAsInt());
      assertEquals(0, person0.getId());
      assertFalse(person0.isFemale());
      assertEquals("male", person0.getGender());
      assertEquals("", person0.getLastName());
      assertEquals(" ", person0.getFirstName());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      assertEquals(0, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertNotNull(person0);
      
      int int0 = person0.getId();
      assertEquals(0, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Person person0 = new Person("female", "Father", true);
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertEquals("Father", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals("female", person0.getFirstName());
      assertNotNull(person0);
      
      int int0 = person0.getId();
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertEquals("Father", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals("female", person0.getFirstName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Person person0 = new Person((String) null, "", true);
      assertTrue(person0.isFemale());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getId());
      assertNull(person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertNotNull(person0);
      
      String string0 = person0.getFirstName();
      assertTrue(person0.isFemale());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getId());
      assertNull(person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Person person0 = new Person("", "", false);
      assertEquals(1, person0.getId());
      assertFalse(person0.isFemale());
      assertEquals("male", person0.getGender());
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertNotNull(person0);
      
      String string0 = person0.getFirstName();
      assertEquals(1, person0.getId());
      assertFalse(person0.isFemale());
      assertEquals("male", person0.getGender());
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Person person0 = Person.restorePerson(10, "/(>kAm6\"S,w", "/(>kAm6\"S,w", false);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("/(>kAm6\"S,w", person0.getLastName());
      assertEquals("/(>kAm6\"S,w", person0.getFirstName());
      assertFalse(person0.isFemale());
      assertEquals(10, person0.getId());
      assertEquals("male", person0.getGender());
      assertNotNull(person0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3882, "A.*gb&|WEO");
      assertEquals("java.util.SimpleTimeZone[id=A.*gb&|WEO,offset=3882,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("A.*gb&|WEO", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(3882, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      person0.setDateOfDeath(mockGregorianCalendar0);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("/(>kAm6\"S,w", person0.getLastName());
      assertEquals("/(>kAm6\"S,w", person0.getFirstName());
      assertFalse(person0.isFemale());
      assertEquals(10, person0.getId());
      assertEquals("male", person0.getGender());
      assertEquals("java.util.SimpleTimeZone[id=A.*gb&|WEO,offset=3882,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("A.*gb&|WEO", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(3882, simpleTimeZone0.getRawOffset());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=A.*gb&|WEO,offset=3882,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=25,MILLISECOND=202,ZONE_OFFSET=3882,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      mockGregorianCalendar0.setLenient(false);
      assertEquals("java.util.SimpleTimeZone[id=A.*gb&|WEO,offset=3882,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("A.*gb&|WEO", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(3882, simpleTimeZone0.getRawOffset());
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=A.*gb&|WEO,offset=3882,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=25,MILLISECOND=202,ZONE_OFFSET=3882,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("/(>kAm6\"S,w", person0.getLastName());
      assertEquals("/(>kAm6\"S,w", person0.getFirstName());
      assertFalse(person0.isFemale());
      assertEquals(10, person0.getId());
      assertEquals("male", person0.getGender());
      assertFalse(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=A.*gb&|WEO,offset=3882,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=25,MILLISECOND=202,ZONE_OFFSET=3882,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertNotNull(gregorianCalendar0);
      assertTrue(gregorianCalendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(gregorianCalendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", " ", true);
      assertEquals(" ", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertNotNull(person0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setFirstDayOfWeek((-830));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-830), mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-830,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      person0.setDateOfDeath(mockGregorianCalendar0);
      assertEquals(" ", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-830), mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-830,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      assertEquals(" ", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-830,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals((-830), gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertNotNull(gregorianCalendar0);
      assertTrue(gregorianCalendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(gregorianCalendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Person person0 = Person.restorePerson(292, "", "72rDO", true);
      assertTrue(person0.isFemale());
      assertEquals(292, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("72rDO", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertNotNull(person0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(292, (-2331), (-2331));
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setLenient(false);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=292,MONTH=-2331,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2331,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(mockGregorianCalendar0.isLenient());
      
      person0.setDateOfBirth(mockGregorianCalendar0);
      assertTrue(person0.isFemale());
      assertEquals(292, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("72rDO", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=292,MONTH=-2331,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2331,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(mockGregorianCalendar0.isLenient());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertTrue(person0.isFemale());
      assertEquals(292, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("72rDO", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertFalse(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=292,MONTH=-2331,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2331,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(gregorianCalendar0);
      assertTrue(gregorianCalendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(gregorianCalendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Person person0 = Person.restorePerson((-1618), "&%j)M(ei,a7KADd$u", "&%j)M(ei,a7KADd$u", true);
      assertEquals("&%j)M(ei,a7KADd$u", person0.getLastName());
      assertEquals("&%j)M(ei,a7KADd$u", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals("female", person0.getGender());
      assertEquals((-1618), person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertNotNull(person0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1016), 15, 0);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=?,YEAR=-1016,MONTH=15,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      person0.setDateOfBirth(mockGregorianCalendar0);
      assertEquals("&%j)M(ei,a7KADd$u", person0.getLastName());
      assertEquals("&%j)M(ei,a7KADd$u", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals("female", person0.getGender());
      assertEquals((-1618), person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=?,YEAR=-1016,MONTH=15,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertEquals("&%j)M(ei,a7KADd$u", person0.getLastName());
      assertEquals("&%j)M(ei,a7KADd$u", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals("female", person0.getGender());
      assertEquals((-1618), person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=?,YEAR=-1016,MONTH=15,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(gregorianCalendar0);
      assertTrue(gregorianCalendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(gregorianCalendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Person person0 = new Person("", "male", true);
      assertEquals("", person0.getFirstName());
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("male", person0.getLastName());
      assertTrue(person0.isFemale());
      assertEquals("female", person0.getGender());
      assertNotNull(person0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      person0.setDateOfBirth(mockGregorianCalendar0);
      assertEquals("", person0.getFirstName());
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("male", person0.getLastName());
      assertTrue(person0.isFemale());
      assertEquals("female", person0.getGender());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-1));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=-1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals((-1), mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertEquals("", person0.getFirstName());
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("male", person0.getLastName());
      assertTrue(person0.isFemale());
      assertEquals("female", person0.getGender());
      assertEquals((-1), gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=-1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertNotNull(gregorianCalendar0);
      assertTrue(gregorianCalendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(gregorianCalendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Person person0 = Person.restorePerson((-1895), "AWRAPpY99~ECQ9~p!", "R!0I{R\"HIBu\"", false);
      assertEquals((-1895), person0.getId());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("AWRAPpY99~ECQ9~p!", person0.getFirstName());
      assertEquals("R!0I{R\"HIBu\"", person0.getLastName());
      assertEquals("male", person0.getGender());
      assertNotNull(person0);
      
      person0.setDateOfDeath((GregorianCalendar) null);
      assertEquals((-1895), person0.getId());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("AWRAPpY99~ECQ9~p!", person0.getFirstName());
      assertEquals("R!0I{R\"HIBu\"", person0.getLastName());
      assertEquals("male", person0.getGender());
      
      // Undeclared exception!
      try { 
        person0.getDateOfDeath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertNull(person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertNull(person0.getFirstName());
      assertNotNull(person0);
      
      person0.setDateOfDeath((GregorianCalendar) null);
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertNull(person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertNull(person0.getFirstName());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1086), 0, (-1086), (-1086));
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        person0.dateOfDeathEquals(mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Person person0 = new Person("plxn7N", "plxn7N", true);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getId());
      assertTrue(person0.isFemale());
      assertEquals("plxn7N", person0.getLastName());
      assertEquals("plxn7N", person0.getFirstName());
      assertNotNull(person0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1180, 2848, (-253));
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setLenient(false);
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1180,MONTH=2848,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-253,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      // Undeclared exception!
      try { 
        person0.dateOfDeathEquals(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Person person0 = Person.restorePerson((-1), "+ciK9cL!", "asI(a}JDvF0", false);
      assertEquals("+ciK9cL!", person0.getFirstName());
      assertFalse(person0.isFemale());
      assertEquals("asI(a}JDvF0", person0.getLastName());
      assertEquals((-1), person0.getId());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      assertNotNull(person0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setTimeZone((TimeZone) null);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        person0.dateOfBirthEquals(mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Person person0 = Person.restorePerson(2909, "zkd", "zkd", true);
      assertEquals("zkd", person0.getFirstName());
      assertEquals("female", person0.getGender());
      assertEquals(2909, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("zkd", person0.getLastName());
      assertTrue(person0.isFemale());
      assertNotNull(person0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setLenient(false);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(mockGregorianCalendar0.isLenient());
      
      mockGregorianCalendar0.set(2909, 2909, 2909);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2909,MONTH=2909,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=2909,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(mockGregorianCalendar0.isLenient());
      
      // Undeclared exception!
      try { 
        person0.dateOfBirthEquals(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Person person0 = new Person("model.AddRelationException", "model.AddRelationException", true);
      assertTrue(person0.isFemale());
      assertEquals("model.AddRelationException", person0.getLastName());
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("model.AddRelationException", person0.getFirstName());
      assertNotNull(person0);
      
      // Undeclared exception!
      try { 
        person0.addSpouse((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Person person0 = Person.restorePerson((-2643), "", "", true);
      assertEquals("female", person0.getGender());
      assertEquals("", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals((-2643), person0.getId());
      assertTrue(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertNotNull(person0);
      
      Person person1 = Person.restorePerson((-2643), "female", "female", true);
      assertEquals("female", person1.getLastName());
      assertEquals((-2643), person1.getId());
      assertEquals("female", person1.getGender());
      assertEquals("female", person1.getFirstName());
      assertTrue(person1.isFemale());
      assertEquals(1, person1.getGenderAsInt());
      assertNotNull(person1);
      assertFalse(person1.equals((Object)person0));
      assertNotSame(person1, person0);
      
      Person person2 = new Person("E~:z2^Bo1.C=Yynq", "", true);
      assertEquals("", person2.getLastName());
      assertEquals(1, person2.getGenderAsInt());
      assertEquals("female", person2.getGender());
      assertTrue(person2.isFemale());
      assertEquals("E~:z2^Bo1.C=Yynq", person2.getFirstName());
      assertEquals(3, person2.getId());
      assertNotNull(person2);
      assertFalse(person2.equals((Object)person0));
      assertFalse(person2.equals((Object)person1));
      
      person0.addChild(person2);
      assertEquals("female", person0.getGender());
      assertEquals("", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals((-2643), person0.getId());
      assertTrue(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals("", person2.getLastName());
      assertEquals(1, person2.getGenderAsInt());
      assertEquals("female", person2.getGender());
      assertTrue(person2.isFemale());
      assertEquals("E~:z2^Bo1.C=Yynq", person2.getFirstName());
      assertEquals(3, person2.getId());
      assertFalse(person0.equals((Object)person1));
      assertFalse(person0.equals((Object)person2));
      assertFalse(person2.equals((Object)person0));
      assertFalse(person2.equals((Object)person1));
      assertNotSame(person0, person1);
      assertNotSame(person0, person2);
      assertNotSame(person2, person0);
      assertNotSame(person2, person1);
      
      Relation relation0 = person2.getRelation(person1);
      assertEquals("female", person1.getLastName());
      assertEquals((-2643), person1.getId());
      assertEquals("female", person1.getGender());
      assertEquals("female", person1.getFirstName());
      assertTrue(person1.isFemale());
      assertEquals(1, person1.getGenderAsInt());
      assertEquals("", person2.getLastName());
      assertEquals(1, person2.getGenderAsInt());
      assertEquals("female", person2.getGender());
      assertTrue(person2.isFemale());
      assertEquals("E~:z2^Bo1.C=Yynq", person2.getFirstName());
      assertEquals(3, person2.getId());
      assertNull(relation0);
      assertFalse(person1.equals((Object)person0));
      assertFalse(person1.equals((Object)person2));
      assertFalse(person2.equals((Object)person0));
      assertFalse(person2.equals((Object)person1));
      assertNotSame(person1, person0);
      assertNotSame(person1, person2);
      assertNotSame(person2, person0);
      assertNotSame(person2, person1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      assertTrue(person0.isFemale());
      assertNull(person0.getLastName());
      assertNull(person0.getFirstName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getId());
      assertNotNull(person0);
      
      Person person1 = new Person((String) null, (String) null, true);
      assertTrue(person1.isFemale());
      assertEquals("female", person1.getGender());
      assertEquals(2, person1.getId());
      assertNull(person1.getFirstName());
      assertEquals(1, person1.getGenderAsInt());
      assertNull(person1.getLastName());
      assertNotNull(person1);
      assertFalse(person1.equals((Object)person0));
      
      person0.addSpouse(person1);
      assertTrue(person0.isFemale());
      assertNull(person0.getLastName());
      assertNull(person0.getFirstName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getId());
      assertTrue(person1.isFemale());
      assertEquals("female", person1.getGender());
      assertEquals(2, person1.getId());
      assertNull(person1.getFirstName());
      assertEquals(1, person1.getGenderAsInt());
      assertNull(person1.getLastName());
      assertFalse(person0.equals((Object)person1));
      assertFalse(person1.equals((Object)person0));
      assertNotSame(person0, person1);
      assertNotSame(person1, person0);
      
      Relation relation0 = person0.getRelation(person1);
      assertTrue(person0.isFemale());
      assertNull(person0.getLastName());
      assertNull(person0.getFirstName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getId());
      assertTrue(person1.isFemale());
      assertEquals("female", person1.getGender());
      assertEquals(2, person1.getId());
      assertNull(person1.getFirstName());
      assertEquals(1, person1.getGenderAsInt());
      assertNull(person1.getLastName());
      assertNotNull(relation0);
      assertFalse(person0.equals((Object)person1));
      assertFalse(person1.equals((Object)person0));
      assertNotSame(person0, person1);
      assertNotSame(person1, person0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Person person0 = Person.restorePerson((-2643), "", "", true);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals((-2643), person0.getId());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertTrue(person0.isFemale());
      assertNotNull(person0);
      
      Person person1 = new Person("E~:z2^Bo1.C=Yynq", "", true);
      assertEquals("", person1.getLastName());
      assertEquals("E~:z2^Bo1.C=Yynq", person1.getFirstName());
      assertEquals(2, person1.getId());
      assertEquals(1, person1.getGenderAsInt());
      assertEquals("female", person1.getGender());
      assertTrue(person1.isFemale());
      assertNotNull(person1);
      assertFalse(person1.equals((Object)person0));
      
      person0.addChild(person1);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals((-2643), person0.getId());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertTrue(person0.isFemale());
      assertEquals("", person1.getLastName());
      assertEquals("E~:z2^Bo1.C=Yynq", person1.getFirstName());
      assertEquals(2, person1.getId());
      assertEquals(1, person1.getGenderAsInt());
      assertEquals("female", person1.getGender());
      assertTrue(person1.isFemale());
      assertFalse(person0.equals((Object)person1));
      assertFalse(person1.equals((Object)person0));
      assertNotSame(person0, person1);
      assertNotSame(person1, person0);
      
      Relation relation0 = person1.getRelation(person0);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals((-2643), person0.getId());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertTrue(person0.isFemale());
      assertEquals("", person1.getLastName());
      assertEquals("E~:z2^Bo1.C=Yynq", person1.getFirstName());
      assertEquals(2, person1.getId());
      assertEquals(1, person1.getGenderAsInt());
      assertEquals("female", person1.getGender());
      assertTrue(person1.isFemale());
      assertNotNull(relation0);
      assertFalse(person0.equals((Object)person1));
      assertFalse(person1.equals((Object)person0));
      assertNotSame(person0, person1);
      assertNotSame(person1, person0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      assertNull(person0.getFirstName());
      assertEquals(1, person0.getId());
      assertTrue(person0.isFemale());
      assertEquals("female", person0.getGender());
      assertNull(person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertNotNull(person0);
      
      Person person1 = new Person("]_saO42=Z8]'>d#", "", true);
      assertEquals("]_saO42=Z8]'>d#", person1.getFirstName());
      assertEquals("", person1.getLastName());
      assertEquals(1, person1.getGenderAsInt());
      assertTrue(person1.isFemale());
      assertEquals("female", person1.getGender());
      assertEquals(2, person1.getId());
      assertNotNull(person1);
      assertFalse(person1.equals((Object)person0));
      
      person1.addChild(person0);
      assertNull(person0.getFirstName());
      assertEquals(1, person0.getId());
      assertTrue(person0.isFemale());
      assertEquals("female", person0.getGender());
      assertNull(person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("]_saO42=Z8]'>d#", person1.getFirstName());
      assertEquals("", person1.getLastName());
      assertEquals(1, person1.getGenderAsInt());
      assertTrue(person1.isFemale());
      assertEquals("female", person1.getGender());
      assertEquals(2, person1.getId());
      assertFalse(person0.equals((Object)person1));
      assertFalse(person1.equals((Object)person0));
      assertNotSame(person0, person1);
      assertNotSame(person1, person0);
      
      Person person2 = Person.restorePerson(0, "Wife", "male", true);
      assertEquals("Wife", person2.getFirstName());
      assertEquals("male", person2.getLastName());
      assertTrue(person2.isFemale());
      assertEquals(1, person2.getGenderAsInt());
      assertEquals(0, person2.getId());
      assertEquals("female", person2.getGender());
      assertNotNull(person2);
      assertFalse(person2.equals((Object)person1));
      assertFalse(person2.equals((Object)person0));
      assertNotSame(person2, person1);
      assertNotSame(person2, person0);
      
      person0.addChild(person2);
      assertNull(person0.getFirstName());
      assertEquals(1, person0.getId());
      assertTrue(person0.isFemale());
      assertEquals("female", person0.getGender());
      assertNull(person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("Wife", person2.getFirstName());
      assertEquals("male", person2.getLastName());
      assertTrue(person2.isFemale());
      assertEquals(1, person2.getGenderAsInt());
      assertEquals(0, person2.getId());
      assertEquals("female", person2.getGender());
      assertFalse(person0.equals((Object)person1));
      assertFalse(person0.equals((Object)person2));
      assertFalse(person2.equals((Object)person1));
      assertFalse(person2.equals((Object)person0));
      assertNotSame(person0, person1);
      assertNotSame(person0, person2);
      assertNotSame(person2, person1);
      assertNotSame(person2, person0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Person person0 = Person.restorePerson(10, "/(>kAm6\"S,w", "/(>kAm6\"S,w", false);
      assertEquals("/(>kAm6\"S,w", person0.getLastName());
      assertEquals("male", person0.getGender());
      assertEquals(10, person0.getId());
      assertEquals("/(>kAm6\"S,w", person0.getFirstName());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getGenderAsInt());
      assertNotNull(person0);
      
      Vector<Object> vector0 = person0.getRelationships();
      assertEquals("/(>kAm6\"S,w", person0.getLastName());
      assertEquals("male", person0.getGender());
      assertEquals(10, person0.getId());
      assertEquals("/(>kAm6\"S,w", person0.getFirstName());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getGenderAsInt());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains("/(>kAm6\"S,w"));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "Father", "Father", true);
      assertEquals("Father", person0.getLastName());
      assertEquals("Father", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals(0, person0.getId());
      assertEquals("female", person0.getGender());
      assertNotNull(person0);
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertEquals("Father", person0.getLastName());
      assertEquals("Father", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals(0, person0.getId());
      assertEquals("female", person0.getGender());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertNotNull(gregorianCalendar0);
      
      gregorianCalendar0.setTimeInMillis(0);
      assertEquals("Father", person0.getLastName());
      assertEquals("Father", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals(0, person0.getId());
      assertEquals("female", person0.getGender());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      assertEquals("Father", person0.getLastName());
      assertEquals("Father", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals(0, person0.getId());
      assertEquals("female", person0.getGender());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Person person0 = new Person("X", "X", true);
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals("X", person0.getLastName());
      assertEquals("X", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertNotNull(person0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-606), (-606), (-606));
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = person0.dateOfDeathEquals(mockGregorianCalendar0);
      assertEquals(1, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals("X", person0.getLastName());
      assertEquals("X", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-606,MONTH=-606,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-606,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertNull(person0.getFirstName());
      assertNull(person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertNotNull(person0);
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertNull(person0.getFirstName());
      assertNull(person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(gregorianCalendar0);
      
      gregorianCalendar0.add(1, (-513));
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertNull(person0.getFirstName());
      assertNull(person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1457,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertNull(person0.getFirstName());
      assertNull(person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1457,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "Father", "Father", true);
      assertEquals("Father", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals("Father", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertNotNull(person0);
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertEquals("Father", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals("Father", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertNotNull(gregorianCalendar0);
      
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      assertEquals("Father", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals("Father", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Person person0 = Person.restorePerson((-1), "+ciK9cL!", "+ciK9cL!", false);
      assertFalse(person0.isFemale());
      assertEquals("+ciK9cL!", person0.getLastName());
      assertEquals("male", person0.getGender());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("+ciK9cL!", person0.getFirstName());
      assertEquals((-1), person0.getId());
      assertNotNull(person0);
      
      boolean boolean0 = person0.dateOfDeathEquals((Calendar) null);
      assertFalse(person0.isFemale());
      assertEquals("+ciK9cL!", person0.getLastName());
      assertEquals("male", person0.getGender());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("+ciK9cL!", person0.getFirstName());
      assertEquals((-1), person0.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertNull(person0.getLastName());
      assertNull(person0.getFirstName());
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertNotNull(person0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      boolean boolean0 = person0.dateOfDeathEquals(calendar0);
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertNull(person0.getLastName());
      assertNull(person0.getFirstName());
      assertEquals(1, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "Father", "Father", true);
      assertEquals(0, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals("Father", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("Father", person0.getLastName());
      assertNotNull(person0);
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertEquals(0, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals("Father", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("Father", person0.getLastName());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(gregorianCalendar0);
      
      gregorianCalendar0.setTimeInMillis(0);
      assertEquals(0, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals("Father", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("Father", person0.getLastName());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      assertEquals(0, person0.getId());
      assertEquals("female", person0.getGender());
      assertEquals("Father", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("Father", person0.getLastName());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Person person0 = new Person("X", "X", true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-606), (-606), (-606));
      boolean boolean0 = person0.dateOfBirthEquals(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-606,MONTH=-606,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-606,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(boolean0);
      assertEquals(1, person0.getId());
      assertEquals("X", person0.getLastName());
      assertEquals("X", person0.getFirstName());
      assertEquals(1, person0.getGenderAsInt());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      gregorianCalendar0.add(1, (-513));
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1457,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "Father", "Father", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      assertTrue(boolean0);
      assertEquals("Father", person0.getFirstName());
      assertEquals(0, person0.getId());
      assertTrue(person0.isFemale());
      assertEquals("Father", person0.getLastName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Person person0 = Person.restorePerson((-1), "+ciK9cL!", "+ciK9cL!", false);
      boolean boolean0 = person0.dateOfBirthEquals((Calendar) null);
      assertEquals((-1), person0.getId());
      assertEquals("+ciK9cL!", person0.getFirstName());
      assertEquals("+ciK9cL!", person0.getLastName());
      assertFalse(boolean0);
      assertEquals(0, person0.getGenderAsInt());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      int int0 = person0.getGenderAsInt();
      assertEquals(1, person0.getId());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Person person0 = Person.restorePerson((-1), "+ciK9cL!", "+ciK9cL!", false);
      int int0 = person0.getGenderAsInt();
      assertEquals(0, int0);
      assertEquals((-1), person0.getId());
      assertEquals("+ciK9cL!", person0.getFirstName());
      assertEquals("+ciK9cL!", person0.getLastName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Person person0 = new Person("Chilj", "Chilj", true);
      String string0 = person0.getGender();
      assertEquals("female", string0);
      assertEquals("Chilj", person0.getFirstName());
      assertEquals(1, person0.getId());
      assertEquals("Chilj", person0.getLastName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Person person0 = Person.restorePerson((-1), "+ciK9cL!", "+ciK9cL!", false);
      String string0 = person0.getGender();
      assertEquals("+ciK9cL!", person0.getFirstName());
      assertEquals("+ciK9cL!", person0.getLastName());
      assertEquals("male", string0);
      assertEquals((-1), person0.getId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Person person0 = new Person(" ]/mc 14yqz", " ]/mc 14yqz", false);
      Person person1 = Person.restorePerson((-2106), "male", "male", false);
      person1.addChild(person0);
      assertEquals("male", person1.getLastName());
      assertFalse(person1.isFemale());
      assertEquals("male", person1.getFirstName());
      assertEquals((-2106), person1.getId());
      
      Vector<Object> vector0 = person0.getChildren();
      assertEquals(" ]/mc 14yqz", person0.getFirstName());
      assertEquals(" ]/mc 14yqz", person0.getLastName());
      assertEquals(1, person0.getId());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Person person0 = Person.restorePerson((-2643), "", "", true);
      Person person1 = Person.restorePerson((-2643), "female", "female", true);
      person0.addChild(person1);
      Vector<Object> vector0 = person0.getChildren();
      assertEquals("[female female]", vector0.toString());
      assertEquals((-2643), person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      Person person1 = new Person((String) null, "female", true);
      person0.addChild(person1);
      boolean boolean0 = person1.removeRelation(person1);
      assertEquals("female", person1.getLastName());
      assertFalse(boolean0);
      assertEquals("female", person1.getGender());
      assertEquals(2, person1.getId());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "Relation exists or is illegal", "Relation exists or is illegal", true);
      Person person1 = Person.restorePerson(0, "male", "=jNu}vH|nzlU L0A#1y", true);
      person0.addSpouse(person1);
      assertEquals("male", person1.getFirstName());
      assertEquals("=jNu}vH|nzlU L0A#1y", person1.getLastName());
      
      Relation relation0 = person0.getRelation((Person) null);
      assertNull(relation0);
      assertEquals(0, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("Relation exists or is illegal", person0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Person person0 = new Person("Chilj", "Chilj", true);
      Person person1 = new Person("Chilj", "Chilj", true);
      person0.addChild(person1);
      boolean boolean0 = person0.removeRelation(person1);
      assertEquals("Chilj", person1.getFirstName());
      assertTrue(boolean0);
      assertEquals("Chilj", person1.getLastName());
      assertEquals("female", person1.getGender());
      assertEquals(2, person1.getId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Person person0 = new Person(" ]/mc 14yqz", " ]/mc 14yqz", false);
      Person person1 = Person.restorePerson((-2106), "female", " ]/mc 14yqz", false);
      Person person2 = Person.restorePerson((-2106), "male", "male", false);
      person2.addChild(person1);
      person2.addChild(person0);
      try { 
        person0.addSpouse(person1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Relation exists or is illegal
         //
         verifyException("model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, true);
      Person person1 = new Person((String) null, "female", true);
      person1.addChild(person0);
      Person person2 = Person.restorePerson((-513), (String) null, "male", true);
      person0.addChild(person2);
      person1.addSpouse(person2);
      assertEquals((-513), person2.getId());
      assertEquals("female", person1.getLastName());
      assertTrue(person2.isFemale());
      assertEquals(2, person1.getId());
      assertEquals("male", person2.getLastName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "Father", "Father", true);
      Person person1 = new Person("female", "Father", true);
      Person person2 = new Person("female", "female", true);
      person1.addChild(person2);
      person0.addSpouse(person1);
      assertEquals("Father", person1.getLastName());
      assertEquals("female", person1.getFirstName());
      
      person2.addChild(person0);
      assertEquals(3, person2.getId());
      assertEquals(0, person0.getId());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("Father", person0.getFirstName());
      assertEquals("Father", person0.getLastName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, false);
      Person person1 = new Person("female", (String) null, false);
      person0.addChild(person1);
      // Undeclared exception!
      try { 
        person0.addChild((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Person person0 = new Person("ru;-`J", "ru;-`J", false);
      Person person1 = new Person("", "female", true);
      person0.addChild(person1);
      try { 
        person1.addSpouse(person0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Relation exists or is illegal
         //
         verifyException("model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Person person0 = new Person("ru;-`J", "ru;-`J", false);
      try { 
        person0.addChild(person0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Relation exists or is illegal
         //
         verifyException("model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Person person0 = new Person((String) null, "", false);
      person0.setDateOfBirth((GregorianCalendar) null);
      // Undeclared exception!
      try { 
        person0.getDateOfBirth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Person person0 = Person.restorePerson((-2643), "", "", true);
      int int0 = person0.getId();
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertEquals((-2643), int0);
      assertEquals("female", person0.getGender());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Person person0 = new Person("5`HLlc`8G^Tx^m3S]M", "5`HLlc`8G^Tx^m3S]M", false);
      String string0 = person0.getFirstName();
      assertEquals("5`HLlc`8G^Tx^m3S]M", string0);
      assertEquals(1, person0.getId());
      assertEquals("5`HLlc`8G^Tx^m3S]M", person0.getLastName());
      assertFalse(person0.isFemale());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Person person0 = Person.restorePerson((-2643), "", "", true);
      String string0 = person0.toString();
      assertEquals((-2643), person0.getId());
      assertEquals(" ", string0);
      assertEquals(1, person0.getGenderAsInt());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Person person0 = new Person((String) null, "", false);
      assertEquals("", person0.getLastName());
      
      person0.setLastName(" ");
      assertEquals(1, person0.getId());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Person person0 = Person.restorePerson((-1), "+ciK9cL!", "asI(a}JDvF0", false);
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      boolean boolean0 = person0.dateOfBirthEquals(mockGregorianCalendar0);
      assertEquals((-1), person0.getId());
      assertEquals("asI(a}JDvF0", person0.getLastName());
      assertFalse(person0.isFemale());
      assertEquals("+ciK9cL!", person0.getFirstName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Person person0 = new Person("Chilj", "Chilj", true);
      String string0 = person0.getLastName();
      assertEquals(1, person0.getId());
      assertEquals("Chilj", person0.getFirstName());
      assertEquals("Chilj", string0);
      assertTrue(person0.isFemale());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, false);
      person0.setFemale(false);
      assertEquals(1, person0.getId());
      assertEquals(0, person0.getGenderAsInt());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, false);
      person0.setFirstName("=W@k");
      assertEquals("=W@k", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals(1, person0.getId());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Person person0 = new Person("Chilj", "Chilj", true);
      boolean boolean0 = person0.isFemale();
      assertEquals(1, person0.getId());
      assertEquals("Chilj", person0.getLastName());
      assertTrue(boolean0);
      assertEquals("Chilj", person0.getFirstName());
  }
}
